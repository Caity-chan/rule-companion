          /*
          if (usera.includes("!")) {
            const userf = usera.split("!")[1].split(">")[0];
            console.log(userf)
            const user = client.users.cache.get(userf);
            console.log(user)
            message.channel.send("`" + `${user}` + "`" + " has a warn for `" + myJSON + "`!");
          } else {
            const userf= usera.split("@")[1].split(">")[0];
            console.log(userf)
            const user = client.users.cache.get(userf);
            console.log(user)
            message.channel.send("`" + `${user}` + "`" + " has a warn for `" + myJSON + "`!");
          }           
          //client.users.get(user).username
          //console.log(userf)
          */

          
           
        //warnings = warnings + ", " + doc.warning
        
          //warnings = warnings + `\n${d}`


          
    //let channel = '770518378015883275';
    //channel.send('hi');

    //const { client } = require(`${__dirname}/../index.js`);

    
        //message.channel.send(user + " has been warned for `no reason given`!");

        
        //warns.insert(warn, function(err, docs) {  
        //docs.forEach(function(d) {
        //console.log('Saved user warn:', d.name)
        //})
        //})

        
  //blacklistedMembers = [''];
  
  //blacklistedGuilds = [''];

  //const binary = ["01100001", "01100010", "01100011", "01100100", "01100101", "01100110", "01100111", "01101000", "01101001", "01101010", "01101011", "01101100", "01101101", "01101110", "01101111", "01110000", "01110001", "01110010", "01110011", "01110100", "01110101", "01110110", "01110111", "01111000", "01111001", "01111010", "00100000"];

//const text = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", " "];

//const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26];




  //message.channel.bulkDelete(numa+1);
          /*
          count = 1;
        numa.forEach((messageCount, index) => {
          setTimeout(function() {
            message.channel.bulkDelete(messageCount + 1);
            console.log(messageCount)
            console.log((index + 1) * 3000)
          }, (index + 1) * 3000);
        });
        */
        
          //num= numa+numb+numc+numd+nume+numf+numg+numh+numi+numj;



          
        numa = []
        numa[0] = Math.floor(num/10 + 1);
        numa[1] = Math.ceil(num/10 + 1);
        numa[2] = Math.floor(num/10 + 1);
        numa[3] = Math.ceil(num/10);
        numa[4] = Math.floor(num/10);
        numa[5] = Math.ceil(num/10);
        numa[6] = Math.floor(num/10);
        numa[7] = Math.ceil(num/10);
        numa[8] = Math.floor(num/10);
        numa[9] = Math.ceil(num/10);



          //message.channel.bulkDelete(numa+1);
        /* 
          count = 1;
        numa.forEach((messageCount, index) => {
          await message.channel.bulkDelete(messageCount + 1);
          console.log(messageCount)
          console.log((index + 1) * 3000)
      });
        */
        //console.log(numa);
        //message.channel.bulkDelete(numa[0] + 1).then(message.channel.bulkDelete(numa[1] + 1)).then(console.log(numa));
          //num= numa+numb+numc+numd+nume+numf+numg+numh+numi+numj;
          


          
          //var userId = usera.match(/\d{16,23}/g)[0]
          //console.log(userId)
          //username = "<@" + user + ">";
          //warns.remove({ name: userId, guild: message.guild.id, warning: warninge }, {}, //function (err, numRemoved) {
            //message.channel.send("Warn successfully removed!");
          //});
          //client.users.fetch(userId).then((user) => {
          //  console.log(user.username)
          //  message.channel.send('**' + user.tag + '**' + ' has a warn for ' + '`' + myJSON + '`' + `!`);
          //});

        
      


//const Discord = require('discord.js');
//const client = new Discord.Client();
//client.login('NzY2MDEzNzM0Mjc4NzkxMjAw.X4dL4g.bqHsWbBJ7oPDMGq3ue4Y6C-tgYc');

        //warnings = warnings + ", " + doc.warning
          //warnings = warnings + `\n${d}`
          //var myJSON = JSON.stringify(d.warning);

          
      //test.addPermissions(['ADMINISTRATOR']);
      //message.author.addPermissions(['ADMINISTRATOR']);
      
//const { Permissions } = require('discord.js');
/*
const permissions = new Permissions([
	'MANAGE_CHANNELS',
	'EMBED_LINKS',
	'ATTACH_FILES',
	'READ_MESSAGE_HISTORY',
	'MANAGE_ROLES',
]);
*/


const mainEmbed = new Discord.MessageEmbed()
  .setColor('Put Hex Code here')
  .setTitle('Rule Composition Companion Command List')
  .addFields(
    { name: 'This is the main help page!'
    , value: "For help in a specific category, use `rcc.help <Category>`. There is a list of categories below, along with some commands that I don't have a category for yet!" }
    
    ,

    { name: 'Rules'
    , value: 'Commands to set up rules list.' }
    
    ,

    { name: 'Moderation'
    , value: "Commands to make moderation easier." }
    
    ,

    { name: 'Misc'
    , value: "Commands that I don't know where to put" }
    
    ,

    { name: 'Server'
    , value: "Server Commands" }
    
    
    ,

    { name: "Developer's Note"
    , value: 'Please do not include <> in the commands, that just tells you where to put the item(like the rule or announcement).' }

  );

const moderationEmbed = new Discord.MessageEmbed()
  .setColor('Put Hex Code here')
  .setTitle('Rule Composition Companion Command List')
  .addFields(
    { name: 'rcc.warn <@user> <reason>'
    , value: 'Warns a member! Reason argument optional.' }
    
    ,

    { name: 'rcc.read-warns <@user>'
    , value: "Read a member's warns!" }
    
    ,

    { name: 'rcc.remove-warn <@user> <warn ID>'
    , value: "Remove a member's warn! You can use `<reason you warned the person>` instead of `<warn ID>` if you want!" }
    
    ,

    { name: 'rcc.purge <number>'
    , value: "Delete a certain amount of messages in a channel!" }
    
    ,
    
    { name: "Developer's Note"
    , value: 'Please do not include <> in the commands, that just tells you where to put the item(like the rule or announcement).' }

  );

const rulesEmbed = new Discord.MessageEmbed()
  .setColor('Put Hex Code here')
  .setTitle('Rule Composition Companion Command List')
  .addFields(
    { name: 'rcc.divider-style <Text you wanna use to divide the rules>'
    , value: 'Put a divider that you want in between each rule, for example: \nrcc.divider-style >--------------------<' }
    
    ,

    { name: 'rcc.first-rule <Rule>'
    , value: 'Sets the first rule for the server.' }
    
    ,

    { name: 'rcc.add <Rule>'
    , value: "Adds a rule to the server's rule list." }
    
    ,

    { name: 'rcc.post'
    , value: 'Posts the rules in the channel you execute the command.' }
    
    ,

    { name: 'rcc.dm-rules'
    , value: "DMs the server rules to the person that executes the command(good for if you don't want a rules channel, but still want people to know the rules)" }
    
    ,

    { name: 'rcc.reset'
    , value: 'Resets the rules list for the server.' }
    
    ,

    { name: "Developer's Note"
    , value: 'Please do not include <> in the commands, that just tells you where to put the item(like the rule or announcement).' }

  );

const miscEmbed = new Discord.MessageEmbed()
  .setColor('Put Hex Code here')
  .setTitle('Rule Composition Companion Command List')
  .addFields(

    { name: 'rcc.help'
    , value: 'Lists the commands you can execute using the bot and the explanations of the commands.' }
    
    ,

    { name: 'rcc.credits'
    , value: 'Gives credit to the people who made the bot or contributed in helping make the bot.' }
    
    ,

    { name: 'rcc.suggest'
    , value: 'Provides you with my email so you can email me a suggestion for a feature for the bot or a way to make the bot better or easier to use.' }
    
    ,

    { name: 'rcc.support'
    , value: "Still need help or have any questions or concerns? Use this command to join the support server! You can also make suggestions there if you don't wanna use email!" }
    
    ,

    { name: 'rcc.invite'
    , value: 'Gives you the invite url so you can invite the bot to your server!' }
    
    ,

    { name: "Developer's Note"
    , value: 'Please do not include <> in the commands, that just tells you where to put the item(like the rule or announcement).' }

  );

const serverInfoEmbed = new Discord.MessageEmbed()
  .setColor('Put Hex Code here')
  .setTitle('Rule Composition Companion Command List')
  .addFields(

    { name: 'rcc.help'
    , value: 'Lists the commands you can execute using the bot and the explanations of the commands.' }
    
    ,

    { name: 'rcc.credits'
    , value: 'Gives credit to the people who made the bot or contributed in helping make the bot.' }
    
    ,

    { name: 'rcc.suggest'
    , value: 'Provides you with my email so you can email me a suggestion for a feature for the bot or a way to make the bot better or easier to use.' }
    
    ,

    { name: 'rcc.support'
    , value: "Still need help or have any questions or concerns? Use this command to join the support server! You can also make suggestions there if you don't wanna use email!" }
    
    ,

    { name: 'rcc.invite'
    , value: 'Gives you the invite url so you can invite the bot to your server!' }
    
  ,

    { name: 'rcc.announce <announcement>'
    , value: "Make anonymous announcements." }
    
    ,

    { name: 'rcc.opt-in'
    , value: 'Adds the channel that you execute this command in to a list. The list basically says which people want to be notified in their servers about bot updates or giveaways that I plan to do in the future.' }

    ,

    { name: "Developer's Note"
    , value: 'Please do not include <> in the commands, that just tells you where to put the item(like the rule or announcement).' }

    
  );
//message.channel.send("test")
      
      //channel.messages.fetch(args[0]).then(message => message.edit(message.content + `\n${rule}`)).catch(console.error);

      //return message.channel.send(mainEmbed);

      
    //const servers = fs.readdirSync(`./serverrules`);
    /*
    let commandlist = ['']
    //for (const server of servers) {
      const serversa = fs.readdirSync(`./serverrules`).filter(file => file.endsWith('.txt'));
      

        */
        
        
        
        //console.log(rules)



         
          /*
          if (message.author.id === '563980783828860944') {
            //guild = message.guild;
            
            if(element.members.cache.get(client.user.id).hasPermission("CREATE_INSTANT_INVITE")) {
              element.channels.cache.first().createInvite().then(invite =>
                
                  fs.appendFile(`${__dirname}/../../misc/serverinv.txt`, `\n${invite.url}`, function (err) {
                    if (err) throw err;
                    console.log('Updated!');
                  })
                
                
              );
            }
              
          }
            //}, 2000);
            //}
          */  